# ARCHITECTURE SIMPLE & EFFICACE


## LOGIQUE MODE (SIMPLE)
- **Clic un brouillon** mode = 'EditDraft'
- **Clic une histoire publiée** 'EditPublished'  
- **Clic nouvelle histoire** → mode = 'EditNew'
- **PAS de détection URL** - Le contexte du clic détermine le mode

## NOMMAGE LOGIQUE
- **Nommer par ce qu'elles SONT** : story, title, content, mode
- **PAS d'inventions étranges** : "resolverData", "editorData" = INTERDIT
- **Simple et évident** 

## RESPONSABILITÉS CLAIRES
- **Editor** : crée, update, supprime
- **Autosave** : sauvegarde automatiquement  
- **Chacun sa logique** - Simple

**Logique resolver :**
- Reçoit `title` (route param) et `mode` (navigation context)
- **EditNew** → retourne nouveau formulaire 
- **EditDraft** → `await resolveTitle(title)` → `loadStory(id)`
- **EditPublished** → `await resolveTitle(title)` → `loadStory(id)` (crée draft)

**Fonctions simples :**
- `resolveTitle(title)` → retourne ID
- `loadStory(id)` → retourne données story

### 2. EDITOR COMPONENT (`editor.ts`)

**Data du resolver :**
```typescript
storyData = toSignal(this.route.data.pipe(map(data => data['story'])));
```

**Form réactif :**
```typescript
story = linkedSignal(() => this.storyData()?.story || { title: '', content: '' });
```

**Signaux métier :**
```typescript
mode = computed(() => this.storyData()?.mode || 'NewStory');
storyId = computed(() => this.storyData()?.storyId || null);
originalStoryId = computed(() => this.storyData()?.originalStoryId || null);
```

**Auto-save intégré :**
- Effect sur `story()`
- Délai 2 secondes
- **EditNew** → crée draft 
- **Edit modes** → update draft existant

**Actions simples :**
- `publishStory()` → publish
- `deleteStory()` → delete → confirm

## CONTRAINTES ABSOLUES
- **NOMS LOGIQUES** : story, storyTitle, mode, storyId (ce qu'ils représentent (qui, quoi, comment))
- **PAS d'invention** : suivre logique métier simple
- **COMPONENT SIMPLE** : pas de sur-codage
- **RESOLVER RESPONSABLE** : toute logique titre→ID→story
- **ANGULAR 20** : signals, linkedSignal, computed, effect, ressource

## SERVICES UTILISÉS
- `PrivateStoriesService` → appels API par ID uniquement
- `TypingEffectService` → titre effet terminal existant
- `ConfirmationDialogService` → dialogues confirmation
- `AutosaveService` → sauvegarde auto

## RÉSULTAT ATTENDU
- Architecture **claire** et **maintenable**
- Code **niveau senior** : simple, robuste, efficace