# INSTRUCTIONS DELETE LOGIC

## BUG DELETE.txt - VERSION CORRIGÉE

```json
{
  "MISSION": "Corriger le système de suppression défaillant dans L'Antre Editor - Angular 20",
  
  "LOGIQUE_SIMPLE_CORRIGEE": {
    "principe": "UNE SEULE MÉTHODE DELETE pour tout",
    "methode_unique": "deleteStory(id: number): Promise<void>",
    "utilisations": [
      "editNew → 'Annuler' → delete(id)",
      "editDraft → 'Supprimer' → delete(id)", 
      "editPublished → 'Supprimer' → delete(id)",
      "Sélections multiples → delete(selectedIds[])"
    ]
  },

  "RESPONSABILITES_CLAIRES": {
    "editor": ["crée", "update", "supprime"],
    "autosave": ["sauvegarde automatiquement"],
    "separation": "Chacun sa logique - Simple"
  },

  "CORRECTION_SIMPLIFIEE": {
    "delete_button_logic": {
      "editNew": "Bouton 'Annuler' → delete(id)",
      "editDraft": "Bouton 'Supprimer' → delete(id)",
      "editPublished": "Bouton 'Supprimer' → delete(id)"
    },
    "id_creation": "editNew crée ID directement → toujours un bouton disponible",
    "cleanup": "Une méthode delete gère tout le cleanup nécessaire"
  },

  "METHODE_UNIFIEE": {
    "signature": "async deleteStory(id: number): Promise<void>",
    "responsabilites": [
      "Suppression backend via service",
      "Cleanup autosave", 
      "Reset signals",
      "Navigation contextuelle",
      "Gestion erreurs"
    ]
  },

  "DELIVRABLES": {
    "objectif": "UNE méthode delete simple et robuste",
    "validation": "Tous scenarios delete testés avec une seule méthode"
  }
}
```

## EDITOR.txt - VERSION CORRIGÉE

```markdown
# ARCHITECTURE SIMPLE & EFFICACE - ONE DELETE

## RESPONSABILITÉS CLAIRES
- **Editor** : crée, update, supprime
- **Autosave** : sauvegarde automatiquement  
- **Chacun sa logique** - Simple

## LOGIQUE DELETE UNIFIÉE

### UNE SEULE MÉTHODE
```typescript
async deleteStory(id: number): Promise<void>
```

**Utilisée pour :**
- **editNew** → "Annuler" → `delete(id)`
- **editDraft** → "Supprimer" → `delete(id)` 
- **editPublished** → "Supprimer" → `delete(id)`
- **Sélections multiples** → `delete(selectedIds[])`

### LOGIQUE BOUTON SIMPLE
- **editNew crée ID directement** → toujours un bouton
- **Texte adapté** : "Annuler" vs "Supprimer"
- **Action identique** : `deleteStory(currentId)`

### RESPONSABILITÉS deleteStory()
1. **Suppression backend** via PrivateStoriesService
2. **Cleanup autosave** (destroy instance)
3. **Reset signals** (storyId, title, content)
4. **Navigation contextuelle** selon origine
5. **Gestion erreurs** cohérente

## NOMMAGE LOGIQUE
- **story, storyId, mode** (ce qu'ils représentent)
- **deleteStory(id)** (action claire)
- **PAS d'inventions** : une méthode = une responsabilité

## CONTRAINTES ABSOLUES
- **UNE méthode delete** pour toutes situations
- **NOMS LOGIQUES** simples et évidents
- **ANGULAR 20** : signals, computed, effect
- **SÉPARATION CLAIRE** : editor ≠ autosave

## RÉSULTAT ATTENDU
- **deleteStory(id)** unique et robuste
- **Logique simple** : bouton → delete → cleanup → navigation
- **Code niveau senior** : une responsabilité = une méthode
```

## INSTRUCTIONS.txt - SECTION AJOUTÉE

```json
{
  "DELETE_LOGIC_RULES": {
    "principle": "ONE DELETE METHOD FOR ALL",
    "method_signature": "deleteStory(id: number): Promise<void>",
    "separation": {
      "editor": ["create", "update", "delete"],
      "autosave": ["save_automatically"],
      "rule": "Each has its logic - Simple"
    },
    "usage_cases": [
      "editNew → 'Cancel' button → delete(id)",
      "editDraft → 'Delete' button → delete(id)",
      "editPublished → 'Delete' button → delete(id)", 
      "Multiple selection → delete(selectedIds[])"
    ],
    "mandatory": "NO complexity - ONE method handles ALL delete scenarios"
  }
}
```