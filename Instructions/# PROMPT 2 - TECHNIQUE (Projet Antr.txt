# PROMPT 2 - TECHNIQUE (Projet Antre)

## üî¨ AUDIT CODE EXISTANT
**M√©thode obligatoire :**
- Analyser chaque fichier : identifier sur-complexit√©s vs bonnes pratiques
- Mesurer : lignes de code, complexit√©, redondances
- Proposer plan de simplification avec justifications
- **Validation requise** avant toute modification

**Conserver :**
- Code lisible et auto-document√©
- Architecture logique √©vidente
- Patterns Angular modernes bien utilis√©s
- API REST coh√©rente

**Simplifier :**
- Composants sur-responsabilis√©s
- Services sur-abstraits
- Code dupliqu√©
- Over-engineering sans valeur

**R√àGLE SIMPLIFICATION FONDAMENTALE :**
- **FUSION INTERDITE** : Ne jamais fusionner du code existant (cause erreurs)
- **R√âVISION √Ä NEUF AUTORIS√âE** : R√©√©crire compl√®tement la logique pour simplicit√©
- **Approche r√©vision** : Repenser architecture depuis z√©ro plut√¥t que patcher

## ‚öôÔ∏è STANDARDS ANGULAR 20
- **Standalone Components** : √âlimination boilerplate modules
- **Signals** : Migration intelligente des observables
- **OnPush** : Change Detection optimis√©e
- **Lazy loading** : Routes organis√©es intelligemment
- **Fichiers s√©par√©s** : TypeScript + HTML + SCSS (jamais inline)

## üèóÔ∏è ARCHITECTURE FULLSTACK
**Backend Express + Prisma :**
- Routes RESTful simples
- Controllers avec logique √©vidente
- Middleware auth/validation uniquement
- Mod√®les Prisma optimis√©s

**R√¥les contextuels (d√©fi principal) :**
- Admin = User dans chroniques + mod√©ration
- Tous √©ditent leurs chroniques
- Seuls admins √©ditent archives

## üé® INTERFACE CARDS + MIXINS
- Syst√®me cards unifi√© pour tous types contenu
- Architecture SCSS selon organisation existante
- Composants r√©utilisables par props
- Performance fluide sans optimisations excessives

## üìä M√âTRIQUES SUCC√àS
- R√©duction 30-50% lignes code
- Bundle < 500KB
- Lighthouse > 95
- Time to Interactive < 2s