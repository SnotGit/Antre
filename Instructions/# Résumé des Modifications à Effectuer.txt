# R√©sum√© des Modifications √† Effectuer

## üéØ **Principe architectural √©tabli :**
- **BACKEND = ID uniquement** (pas de traitement de strings/titres)
- **FRONTEND = "Resolvers"** (m√©thodes dans services pour traduction titre‚ÜíID puis appel backend avec ID)
- **Domaines s√©par√©s** : `public` (consultation + profils) vs `private` (gestion personnelle)

## üìù **CLARIFICATION TERMINOLOGIQUE :**
- **‚ùå PAS de "resolvers Angular s√©par√©s"** (fichiers .resolver.ts)
- **‚úÖ "Resolvers" = m√©thodes dans les SERVICES** (ex: `resolveStory()`, `resolveForEdit()`)
- **‚úÖ Composants** = utilisent resource() + les "resolvers" des services
- **‚úÖ Backend** = g√®re le d√©codage URL avec `decodeURIComponent()`

## üîç **R√âPARTITION DES "RESOLVERS" :**

### **PublicStoriesService (consultation publique) :**
- `resolveStory(username, title)` ‚Üí pour consulter les histoires des **autres**
- `getStoryById(id)` ‚Üí r√©cup√©rer histoire publique par ID
- `findByUsernameTitle(username, title)` ‚Üí trouver ID depuis username/title public

### **PrivateStoriesService (gestion personnelle) :**
- `resolveForEdit(title)` ‚Üí pour √©diter **ses propres** histoires
- `getDraft(id)` ‚Üí r√©cup√©rer **son** brouillon par ID
- `getPublishedToDraft(id)` ‚Üí cr√©er draft depuis **sa** publi√©e par ID
- `findMyStoryByTitle(title)` ‚Üí trouver ID depuis **son** titre personnel

**Logique :**
- **PUBLIC** = je consulte les histoires des autres (Elena, etc.)
- **PRIVATE** = je g√®re mes propres histoires (mes brouillons, mes publi√©es)

---

## üîß **BACKEND - Modifications n√©cessaires**

### **1. Architecture des routes (GARDER avec pr√©fixe section)**
```
/api/chroniques/public-stories/      ‚Üê PUBLIC (consultation histoires + profils users)
/api/chroniques/private-stories/     ‚Üê PRIVATE (gestion personnelle des histoires)
```

### **2. Routes publiques √† ajouter (`/api/chroniques/public-stories/`)**
- `GET /:id` ‚Üí r√©cup√©rer histoire publi√©e par ID
- `GET /find/:username/:title` ‚Üí r√©soudre titre‚ÜíID (pour resolvers)

### **3. Routes priv√©es √† refactoriser (`/api/chroniques/private-stories/`)**

**S√âPARER la route `edit` actuelle EN 2 routes distinctes :**
- `GET /story/draft/:id` ‚Üí r√©cup√©rer brouillon existant par ID
- `GET /story/published-to-draft/:id` ‚Üí cr√©er nouveau brouillon depuis publi√©e par ID

**AJOUTER route de r√©solution :**
- `GET /find/:title` ‚Üí r√©soudre titre personnel‚ÜíID + status

**GARDER les routes existantes avec nomenclature coh√©rente :**

**CONSULTATION/NAVIGATION (pluriel) :**
- `GET /stories/stats`, `GET /stories/drafts`, `GET /stories/published`

**ACTIONS SUR 1 HISTOIRE (singulier) :**
- `POST /story/draft`, `PUT /story/draft/:id`
- `POST /story/publish/:id`, `POST /story/republish/:id`
- `DELETE /story/cancel/:id`, `DELETE /story/draft/:id`
- `POST /story/like/:id`

### **4. Controllers √† modifier**
- **Modifier :** `publicStoriesController.js` (ajouter routes ID)
- **Modifier :** `privateStoriesController.js` (diviser route edit en 2)

### **5. Server.js √† modifier**
```javascript
// GARDER architecture simple et modulaire :
app.use('/api/auth', authRoutes);
app.use('/api/user', userRoutes);
app.use('/api/chroniques/public', publicStoriesRoutes);    // ‚Üê Section Chroniques
app.use('/api/chroniques/private', privateStoriesRoutes);  // ‚Üê Section Chroniques
// FUTUR :
// app.use('/api/marsball', marsballRoutes);               ‚Üê Section Marsball
// app.use('/api/staff', staffRoutes);                     ‚Üê Section Staff
```

**Principe :** **1 controller = 1 section du site**
- ‚úÖ Serveur simple et organis√© par domaines m√©tier
- ‚úÖ Pas 400 routes dispers√©es pour 5 sections de site
- ‚úÖ Architecture modulaire et scalable
- ‚úÖ Isolation compl√®te entre sections

---

## üÖ∞Ô∏è **FRONTEND - Modifications n√©cessaires**

### **1. Services √† modifier**

**PublicStoriesService :**
- **AJOUTER :** `resolveStory(username: string, title: string)` ‚Üí titre‚ÜíID‚Üídonn√©es
- **AJOUTER :** `getStoryById(id: number)` ‚Üí r√©cup√©rer histoire par ID
- **AJOUTER :** `findByUsernameTitle(username: string, title: string)` ‚Üí r√©soudre titre‚ÜíID
- **POINTER vers :** `/api/chroniques/public-stories/`

**PrivateStoriesService :**
- **AJOUTER :** `resolveForEdit(title: string)` ‚Üí titre‚ÜíID+status‚Üídonn√©es √©dition
- **AJOUTER :** `getDraft(id: number)` ‚Üí r√©cup√©rer brouillon par ID
- **AJOUTER :** `getPublishedToDraft(id: number)` ‚Üí cr√©er draft depuis publi√©e par ID
- **AJOUTER :** `findMyStoryByTitle(title: string)` ‚Üí r√©soudre titre‚ÜíID+status
- **GARDER :** m√©thodes de sauvegarde/publication/suppression existantes
- **POINTER vers :** `/api/chroniques/private-stories/`

### **2. Composants √† modifier**

**Story Component :**
```typescript
// REMPLACER logique actuelle PAR :
private storyResource = resource({
  params: () => this.routeParams(),
  loader: ({ params }) => this.publicService.resolveStory(params.username, params.title)
});
```

**Editor Component :**
```typescript
// REMPLACER resource() actuel PAR :
private storyResource = resource({
  params: () => this.routeParams(),
  loader: ({ params }) => this.privateService.resolveForEdit(params.title)
});
```

### **3. Routes Angular (AUCUN CHANGEMENT)**
```typescript
// GARDER les routes existantes, pas de resolvers s√©par√©s
{
  path: ':username/:title',
  component: Story
},
{
  path: 'edition/brouillon/:title',
  component: Editor
},
{
  path: 'edition/publi√©e/:title', 
  component: Editor
}
```
- Pointer vers nouvelles routes `/api/private-stories/`
- Garder la logique existante

---

## üö´ **PROBL√àME √Ä R√âSOUDRE**
- **Encodage URL :** `Elena%20/Le%20Signal%20de%20Phobos`
- **Solution :** `decodeURIComponent()` dans les **controllers backend**
- **Qui g√®re quoi :**
  - **Angular** ‚Üí encode automatiquement les URLs
  - **Services frontend** ‚Üí passent les valeurs "brutes" 
  - **Backend controllers** ‚Üí d√©codent avec `decodeURIComponent()`
- **Exemple :** `/api/chroniques/public-stories/find/elena/le-signal-de-phobos`

### **Avantages de cette approche :**
- ‚úÖ **Services** = logique m√©tier avec m√©thodes "resolvers" (r√©solution titre‚ÜíID‚Üídonn√©es)
- ‚úÖ **Composants** = logique UI (resource, loading, error, affichage)
- ‚úÖ **Testable** facilement (m√©thodes "resolvers" isol√©es dans services)
- ‚úÖ **R√©utilisable** dans d'autres composants si n√©cessaire
- ‚úÖ **Maintenable** (pas de fichiers resolvers s√©par√©s √† g√©rer)
- ‚úÖ **Coh√©rent** avec l'architecture existante

**S√©paration des responsabilit√©s :**
- **Services** ‚Üí m√©thodes "resolvers" complexes (titre‚ÜíID‚Üídonn√©es) 
- **Composants** ‚Üí gestion UI (loading states, error handling, affichage)

---

## üìã **PLAN D'EX√âCUTION M√âTHODIQUE**

### **üîß √âTAPE 1 : BACKEND (API d'abord)**

**1.1 - publicStoriesController.js**
- AJOUTER : `getStoryById(id)` ‚Üí r√©cup√©rer histoire par ID
- AJOUTER : `findByUsernameAndTitle(username, title)` ‚Üí r√©soudre titre‚ÜíID
- AJOUTER : `decodeURIComponent(username)` et `decodeURIComponent(title)` pour g√©rer l'encodage URL

**1.2 - privateStoriesController.js** 
- DIVISER : `getStoryForEdit()` EN 2 m√©thodes distinctes :
  - `getDraft(id)` ‚Üí r√©cup√©rer brouillon par ID
  - `getPublishedToDraft(id)` ‚Üí cr√©er draft depuis publi√©e par ID
- AJOUTER : `findMyStoryByTitle(title)` ‚Üí r√©soudre titre‚ÜíID+status
- AJOUTER : `decodeURIComponent(title)` pour g√©rer l'encodage URL

**1.3 - publicStories.routes.js**
- AJOUTER : `GET /:id` ‚Üí `getStoryById`
- AJOUTER : `GET /find/:username/:title` ‚Üí `findByUsernameAndTitle`

**1.4 - privateStories.routes.js**
- REMPLACER : `GET /edit/:id` PAR :
  - `GET /story/draft/:id` ‚Üí `getDraft`
  - `GET /story/published-to-draft/:id` ‚Üí `getPublishedToDraft`
- AJOUTER : `GET /find/:title` ‚Üí `findMyStoryByTitle`
- CORRIGER nomenclature : `/stories/` (pluriel) vs `/story/` (singulier)

**1.5 - server.js**
- MODIFIER pr√©fixes routes : `/api/chroniques/public-stories/`, `/api/chroniques/private-stories/`

### **üÖ∞Ô∏è √âTAPE 2 : FRONTEND SERVICES**

**2.1 - PublicStoriesService**
- AJOUTER : `resolveStory(username, title)` ‚Üí m√©thode "resolver" compl√®te titre‚Üídonn√©es
- AJOUTER : `getStoryById(id)` ‚Üí appel API par ID
- AJOUTER : `findByUsernameTitle(username, title)` ‚Üí r√©solution titre‚ÜíID
- MODIFIER : baseUrl vers `/api/chroniques/public-stories/`
- **Note :** Pas de gestion d'encodage (Angular encode automatiquement, backend d√©code)

**2.2 - PrivateStoriesService**
- AJOUTER : `resolveForEdit(title)` ‚Üí m√©thode "resolver" compl√®te titre‚Üídonn√©es √©dition
- AJOUTER : `getDraft(id)` ‚Üí appel API brouillon par ID
- AJOUTER : `getPublishedToDraft(id)` ‚Üí appel API published‚Üídraft par ID
- AJOUTER : `findMyStoryByTitle(title)` ‚Üí r√©solution titre‚ÜíID+status
- SUPPRIMER : `getStoryForEdit()` (remplac√©e par les m√©thodes ci-dessus)
- MODIFIER : baseUrl vers `/api/chroniques/private-stories/`
- **Note :** Pas de gestion d'encodage (Angular encode automatiquement, backend d√©code)

**2.3 - AutoSaveService**
- SUPPRIMER : logique de cr√©ation de brouillons
- GARDER SEULEMENT : logique de sauvegarde automatique
- CORRIGER : `performSave()` ‚Üí uniquement updateDraft, pas de cr√©ation

### **üé® √âTAPE 3 : FRONTEND COMPOSANTS**

**Story Component :**
```typescript
// REMPLACER logique actuelle PAR :
private storyResource = resource({
  params: () => this.routeParams(),
  loader: ({ params }) => this.publicService.resolveStory(params.username, params.title)
});

// G√âRER les states UI :
story = computed(() => this.storyResource.value());
loading = computed(() => this.storyResource.isLoading());
error = computed(() => this.storyResource.error());
```

**Editor Component :**
```typescript
// REMPLACER resource() actuel PAR :
private storyResource = resource({
  params: () => this.routeParams(),
  loader: ({ params }) => this.privateService.resolveForEdit(params.title)
});

// AJOUTER logique de cr√©ation du premier brouillon :
onFirstChange() {
  if (!this.storyId() && this.mode() === 'NewStory') {
    const response = await this.privateService.createDraft(this.updateStory());
    this.storyId.set(response.story.id);
    this.setupAutoSave(); // Puis activer auto-save
  }
}

// G√âRER les states UI :
storyData = computed(() => this.storyResource.value());
loading = computed(() => this.storyResource.isLoading());
error = computed(() => this.storyResource.error());
```

**IMPORTANT :** Les composants **GARDENT** la logique UI (resource, loading, error) mais **D√âL√àGUENT** la logique m√©tier aux services

### **‚öôÔ∏è √âTAPE 4 : CONFIGURATION**

**4.1 - Routes Angular**
- V√âRIFIER : que les routes existantes fonctionnent avec les nouveaux services
- PAS DE MODIFICATION : on garde `resource()` dans les composants

### **üìù √âTAPE 5 : VALIDATION**

**5.1 - Tests manuels**
- Tester flow public : `/elena/le-signal-de-phobos`
- Tester flow priv√© : `/edition/brouillon/mon-titre`
- V√©rifier auto-save fonctionne
- V√©rifier encodage URLs r√©solu

---

## ‚ö†Ô∏è **ORDRE D'EX√âCUTION OBLIGATOIRE**

1. **BACKEND D'ABORD** (controllers ‚Üí routes ‚Üí server)
2. **PUIS SERVICES** (public ‚Üí private ‚Üí autosave)  
3. **PUIS COMPOSANTS** (story ‚Üí editor)
4. **ENFIN TESTS**

**VALIDATION √Ä CHAQUE √âTAPE :**
- ‚úÖ Apr√®s chaque fichier : compilation sans erreur
- ‚úÖ Apr√®s chaque service : API r√©pond correctement  
- ‚úÖ Apr√®s chaque composant : affichage fonctionnel
- ‚úÖ Final : tous les flows fonctionnent

**PRINCIPE :** **1 fichier = 1 livraison = 1 validation**

---

## ‚úÖ **R√âSULTAT ATTENDU**

### **Flow public :**
1. URL `/elena/le-signal-de-phobos`
2. **Composant** : `resource()` appelle m√©thode "resolver" `publicService.resolveStory(elena, le-signal-de-phobos)`
3. **Service** : m√©thode "resolver" fait `username/title` ‚Üí `/api/chroniques/public-stories/find/elena/le-signal-de-phobos` ‚Üí ID
4. **Service** : m√©thode "resolver" fait ID ‚Üí `/api/chroniques/public-stories/:id` ‚Üí donn√©es
5. **Composant** : re√ßoit donn√©es + g√®re loading/error states

### **Flow priv√© :**
1. URL `/edition/brouillon/mon-titre`
2. **Composant** : `resource()` appelle m√©thode "resolver" `privateService.resolveForEdit(mon-titre)`
3. **Service** : m√©thode "resolver" fait `title` ‚Üí `/api/chroniques/private-stories/find/mon-titre` ‚Üí ID + status
4. **Service** : m√©thode "resolver" fait selon status ‚Üí `/api/chroniques/private-stories/story/draft/456` ou `/story/published-to-draft/456`
5. **Composant** : re√ßoit donn√©es + g√®re loading/error states + setup auto-save

### **Avantages :**
- ‚úÖ Backend = ID uniquement (logique simple)
- ‚úÖ URLs propres sans encodage (resolvers d√©codent)
- ‚úÖ Domaines public/priv√© coh√©rents avec les noms de fichiers
- ‚úÖ Routes explicites (draft vs published-to-draft)
- ‚úÖ S√©paration claire : logique m√©tier (services) vs logique UI (composants)
- ‚úÖ Composants gardent resource() et states UI, services g√®rent la complexit√© m√©tier