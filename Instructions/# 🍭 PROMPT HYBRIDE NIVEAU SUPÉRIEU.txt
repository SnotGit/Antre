# üç≠ PROMPT HYBRIDE NIVEAU SUP√âRIEUR - Guide √âducatif

## üéØ OBJECTIF DE CETTE M√âTHODE

**PROBL√àME CLASSIQUE :**
- LLM oublie les contraintes dans sessions longues
- Instructions dispers√©es = dilution d'attention
- R√©p√©titions constantes = perte de temps
- Qualit√© code d√©croissante

**SOLUTION HYBRIDE :**
- **Constitution JSON** = R√©f√©rence structur√©e permanente
- **Prompts sp√©cifiques** = Instructions task pr√©cise
- **Checklist syst√©matique** = Qualit√© garantie

---

## üìã √âTAPE 1 : CONSTITUTION PROJET (Instructions G√©n√©rales)

### üç≠ EXEMPLE : Site E-commerce Bonbons

```json
{
  "PROJECT": {
    "name": "SweetShop",
    "type": "E-commerce Angular 20 Bonbons",
    "theme": "Color√©, moderne, responsive",
    "target": "Vente bonbons artisanaux en ligne"
  },

  "TECHNICAL_RULES": {
    "angular_version": "Angular 20",
    "architecture": ["signals", "resources", "standalone_components"],
    "naming": "Noms m√©tier clairs (candy, product, cart, order)",
    "forbidden_names": ["data", "item", "thing", "stuff"],
    "backend_logic": "API REST avec IDs",
    "frontend_logic": "Resources pour donn√©es, signals pour √©tat",
    "no_observables": "Migration compl√®te vers signals"
  },

  "CODE_QUALITY": {
    "level": "Senior - simple, lisible, performant",
    "separators": "//============ SECTION ============",
    "no_console_logs": true,
    "no_comments": "Code auto-document√©",
    "delivery": "1 fichier parfait par message",
    "auto_verify": "V√©rifier avant livraison"
  },

  "UX_RULES": {
    "responsive": "Mobile-first design",
    "accessibility": "ARIA labels, contraste",
    "performance": "Lazy loading, optimizations",
    "animations": "Micro-interactions fluides"
  },

  "BUSINESS_LOGIC": {
    "catalog": "Cat√©gories ‚Üí Produits ‚Üí Variantes",
    "cart": "Ajout/suppression, calcul total",
    "checkout": "Validation, paiement, confirmation",
    "user": "Authentification, profil, historique"
  },

  "APP_MODULES": {
    "catalog": "Navigation et affichage produits",
    "product": "D√©tail produit, variantes, avis",
    "cart": "Panier, quantit√©s, checkout",
    "user": "Compte, commandes, favoris",
    "admin": "Gestion stock, commandes"
  }
}
```

---

## üéØ √âTAPE 2 : PROMPT SP√âCIFIQUE (Task Pr√©cise)

### üç¨ EXAMPLE : Component Gello.ts

```json
{
  "CURRENT_MISSION": {
    "name": "Gello Component - Liste Bonbons Gello",
    "objective": "Afficher catalogue bonbons gello avec filtres et tri",
    "deliverable": "gello.component.ts complet + interface"
  },

  "COMPONENT_SPECS": {
    "purpose": "Afficher bonbons de type 'gello' avec interactions",
    "location": "src/app/catalog/gello/gello.component.ts",
    "route": "/catalog/gello",
    "parent": "Catalog Module"
  },

  "BUSINESS_REQUIREMENTS": {
    "display": "Grid responsive de bonbons gello",
    "filters": ["prix", "saveur", "couleur", "stock"],
    "sorting": ["nom", "prix", "popularit√©", "nouveaut√©"],
    "actions": ["ajout panier", "voir d√©tail", "favoris"],
    "pagination": "20 items par page"
  },

  "TECHNICAL_REQUIREMENTS": {
    "data_source": "GelloService.getGelloList()",
    "state_management": "Signals pour filters, sorting, pagination",
    "loading_states": "Skeleton loading pendant fetch",
    "error_handling": "Message utilisateur si erreur",
    "responsive": "3 colonnes desktop, 2 tablet, 1 mobile"
  },

  "INTERFACE_DESIGN": {
    "GelloCandy": {
      "id": "number",
      "name": "string", 
      "price": "number",
      "flavor": "string",
      "color": "string",
      "image": "string",
      "stock": "number",
      "isNew": "boolean"
    },
    "GelloFilters": {
      "priceRange": "[number, number]",
      "flavors": "string[]",
      "colors": "string[]",
      "inStockOnly": "boolean"
    }
  },

  "COMPONENT_STRUCTURE": {
    "signals": [
      "gelloList = resource(() => this.gelloService.getGelloList())",
      "filters = signal<GelloFilters>(defaultFilters)",
      "sorting = signal<string>('name')",
      "currentPage = signal<number>(1)"
    ],
    "computed": [
      "filteredGellos = computed(() => applyFilters(gelloList(), filters()))",
      "paginatedGellos = computed(() => paginate(filteredGellos(), currentPage()))",
      "totalPages = computed(() => calculatePages(filteredGellos()))"
    ],
    "methods": [
      "onFilterChange(newFilters)",
      "onSortChange(sortBy)", 
      "onPageChange(page)",
      "addToCart(gello)",
      "toggleFavorite(gello)"
    ]
  },

  "SERVICES_NEEDED": [
    "GelloService ‚Üí API calls",
    "CartService ‚Üí Ajout panier",
    "FavoritesService ‚Üí Gestion favoris"
  ]
}
```

---

## ‚ö° √âTAPE 3 : PROMPT FINAL ASSEMBL√â

### üìù Template de Demande

```markdown
# üç¨ CR√âATION COMPONENT GELLO

## üìã R√âF√âRENCE CONSTITUTION
[Copier-coller la constitution JSON SweetShop ci-dessus]

## üéØ TASK SP√âCIFIQUE  
[Copier-coller le prompt gello.component.ts ci-dessus]

## ‚úÖ CHECKLIST PR√â-LIVRAISON
Avant de r√©pondre, v√©rifier :
- [ ] Respect TECHNICAL_RULES (Angular 20, signals, naming)
- [ ] Respect CODE_QUALITY (s√©parateurs, niveau senior)
- [ ] Respect UX_RULES (responsive, performance)
- [ ] Impl√©mentation COMPONENT_STRUCTURE compl√®te
- [ ] Interfaces d√©finies correctement
- [ ] Auto-v√©rification avant envoi

## üöÄ DEMANDE
Cr√©e le fichier gello.component.ts selon ces sp√©cifications.
```

---

## üß† POURQUOI CETTE M√âTHODE FONCTIONNE

### ‚úÖ AVANTAGES

**1. STRUCTURE CLAIRE**
- Constitution = R√®gles permanentes
- Prompt sp√©cifique = Instructions pr√©cises
- LLM peut "scanner" rapidement

**2. QUALIT√â GARANTIE**
- Checklist syst√©matique
- Contraintes techniques claires
- Niveau de code constant

**3. √âVOLUTIVIT√â**
- Constitution modifiable
- Prompts sp√©cialis√©s r√©utilisables
- Scalable sur gros projets

**4. EFFICACIT√â**
- Moins de r√©p√©titions
- Sessions longues sans perte contexte
- Gains de temps √©normes

### üéØ COMPARAISON

**PROMPT CLASSIQUE :**
```
"Cr√©e un component pour afficher des bonbons gello 
avec des filtres et du tri, en Angular"
```
‚Üí R√©sultat : Code g√©n√©rique, manque sp√©cifications

**PROMPT HYBRIDE :**
- Constitution d√©taill√©e ‚úÖ
- Sp√©cifications pr√©cises ‚úÖ  
- Qualit√© garantie ‚úÖ
- Code sur-mesure ‚úÖ

---

## üõ†Ô∏è COMMENT L'ADAPTER √Ä TON PROJET

### 1. **Cr√©e ta Constitution**
```json
{
  "PROJECT": { /* Ton contexte */ },
  "TECHNICAL_RULES": { /* Tes contraintes tech */ },
  "CODE_QUALITY": { /* Tes standards */ }
}
```

### 2. **D√©finis tes Prompts Sp√©cifiques**
- Un JSON par component/feature
- Sp√©cifications business claires
- Structure technique d√©taill√©e

### 3. **√âtablis ta Checklist**
- Points de v√©rification syst√©matiques
- Crit√®res de qualit√©
- Auto-contr√¥le avant livraison

### 4. **It√®re et Am√©liore**
- Ajuste selon retours
- Enrichis la constitution
- Optimise les prompts

---

## üöÄ R√âSULTAT ATTENDU

Avec cette m√©thode, tu obtiens :
- **Code niveau senior** syst√©matiquement
- **Coh√©rence** sur gros projets  
- **Productivit√©** d√©cupl√©e
- **Moins de frustration** = plus d'efficacit√©

**La cl√© :** Structure + Pr√©cision + R√©p√©tabilit√© = Excellence