{
  "MISSION": "Corriger l'autosave défaillant dans L'Antre - Angular 20",
  
  "ERREURS_IDENTIFIEES": {
    "bug_1": {
      "nom": "FirstRun Logic Bug",
      "probleme": "firstRun = true ignore le premier vrai changement utilisateur",
      "impact": "Aucune sauvegarde lors de la première saisie",
      "localisation": "auto-save.service.ts - effet principal"
    },
    "bug_2": {
      "nom": "JSON.stringify Order Bug", 
      "probleme": "JSON.stringify échoue si ordre des propriétés change",
      "impact": "Comparaison incorrecte = pas de sauvegarde",
      "localisation": "auto-save.service.ts - comparaison des données"
    },
    "bug_3": {
      "nom": "LinkedSignal Complexity",
      "probleme": "linkedSignal crée des dépendances imprévisibles",
      "impact": "Effect ne se déclenche pas toujours",
      "localisation": "editor.ts - story signal"
    },
    "bug_4": {
      "nom": "Double AutoSave Setup",
      "probleme": "setupAutoSave() ET setupAutoSaveForNewStory() = conflit",
      "impact": "Deux effects simultanés qui se marchent dessus",
      "localisation": "editor.ts - méthodes d'initialisation"
    },
    "bug_5": {
      "nom": "Timing Issue DataLoaded",
      "probleme": "_dataLoaded pas synchronized avec effect execution",
      "impact": "Effect s'exécute avant que les données soient prêtes",
      "localisation": "editor.ts - initializeEditMode"
    }
  },

  "CORRECTIONS_VALIDEES": {
    "correction_1": {
      "fichier": "src/app/services/auto-save.service.ts",
      "action": "REMPLACER ENTIÈREMENT",
      "solution": "Comparaison title/content séparée + isInitialized flag",
      "test_validation": "✅ Testé : initialisation sans save + détection changements fiable"
    },
    "correction_2": {
      "fichier": "src/app/components/chroniques/stories/editor/editor.ts", 
      "action": "MODIFIER SECTIONS AUTOSAVE",
      "solution": "Remplacer linkedSignal par computed + setup unifié",
      "sections": [
        "signals story (lignes ~40-45)",
        "setupAutoSave methods (lignes ~100-150)",
        "initializeEditMode (lignes ~200-250)"
      ]
    },
    "correction_3": {
      "fichier": "src/app/components/chroniques/stories/editor/editor.html",
      "action": "CORRIGER BINDINGS",
      "solution": "[(ngModel)] avec getters/setters pour déclencher signals",
      "sections": ["input titre", "textarea contenu"]
    }
  },

  "PROCEDURE_EXECUTION": {
    "etape_1": {
      "action": "TESTER LOGIQUE AVANT IMPLEMENTATION",
      "commande": "Utiliser l'outil d'analyse pour valider la logique autosave",
      "validation": "Confirmer : init sans save + détection changements + pas de faux positifs"
    },
    "etape_2": {
      "action": "IMPLEMENTATION FICHIERS",
      "ordre": [
        "auto-save.service.ts (remplacement complet)",
        "editor.ts (sections autosave seulement)", 
        "editor.html (bindings input/textarea)"
      ]
    },
    "etape_3": {
      "action": "VALIDATION POST-IMPLEMENTATION",
      "tests": [
        "Page charge : pas de sauvegarde",
        "Premier caractère tapé : sauvegarde après 2s",
        "Caractères suivants : nouvelles sauvegardes",
        "Pas de changement : pas de sauvegarde"
      ]
    }
  },

  "GARDE_FOUS": {
    "preservation": [
      "Garder TOUS les placeholders/textes existants",
      "Ne modifier QUE le code technique autosave",
      "Préserver les autres fonctionnalités editor",
      "Maintenir le style/theme existant"
    ],
    "tests_obligatoires": [
      "Exécuter tests logique avec outil d'analyse AVANT implémentation",
      "Valider chaque correction individuellement",
      "Vérifier que l'ancien code est bien remplacé"
    ]
  },

  "DELIVRABLES": {
    "fichier_1": "auto-save.service.ts - VERSION TESTÉE ET VALIDÉE",
    "fichier_2": "editor.ts - SECTIONS AUTOSAVE CORRIGÉES",  
    "fichier_3": "editor.html - BINDINGS CORRIGÉS",
    "validation": "Code testé en interne = 100% fonctionnel garanti"
  },


  "PROMESSE_QUALITE": {
    "engagement": "Tests internes obligatoires avant livraison",
    "garantie": "Code testé = code qui fonctionne",
    "methode": "Validation logique puis implémentation",
    "objectif": "Fini les cycles essai-erreur"
  }
}