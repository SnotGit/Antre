{
  "task": "REFACTORISATION - Terminal ",
  "project": "L'Antre - Angular 20 Roleplay Platform",
  "objective": "Permettre à chaque utilisateur de personnaliser son terminal avec son playerId et playerDays",

  "requirements": {
    "architecture": "Angular 20 + signals + standalone components",
    "code_style": "Séparateurs //============, pas de commentaires parasites, niveau senior",
    "feature": "Terminal dynamique basé sur playerId et playerDays de l'utilisateur connecté"
  },

  "step_by_step_implementation": {
    
    "ÉTAPE 1 - DATABASE": {
      "file": "backend/prisma/schema.prisma",
      "action": "Ajouter 2 nouveaux champs à la table User",
      "changes": {
        "add_fields": [
          "playerId     Int? @map(\"player_id\")",
          "playerDays   Int? @map(\"player_days\")"
        ]
      },
      "validation": "Migration Prisma à générer et appliquer"
    },

    "ÉTAPE 2 - TYPESCRIPT INTERFACE": {
      "file": "src/features/auth/services/auth.service.ts",
      "action": "Mettre à jour l'interface User",
      "changes": {
        "interface_User": {
          "add_properties": [
            "playerId?: number;",
            "playerDays?: number;"
          ]
        }
      }
    },

    "ÉTAPE 3 - TERMINAL COMPONENT": {
      "file": "src/shared/utilities/terminal/terminal.ts",
      "action": "Refactoriser pour utiliser les données utilisateur",
      "changes": {
        "imports": "Ajouter AuthService import",
        "injections": "Injecter AuthService",
        "computed_signals": {
          "prompt": "computed(() => `${user?.playerId || 'inconnu'}:~$ `)",
          "weatherData": "computed(() => [..., `> SOL 2086 - DAY ${user?.playerDays || 'inconnu'}`])"
        },
        "method_calls": "Remplacer this.prompt par this.prompt() et this.weatherData par this.weatherData()"
      }
    },

    "ÉTAPE 4 - BACKEND USER CONTROLLER": {
      "file": "backend/src/controllers/userController.js",
      "action": "Mettre à jour updateProfile pour gérer playerId et playerDays",
      "changes": {
        "updateProfile_function": {
          "extract_fields": "const { username, description, playerId, playerDays } = req.body;",
          "validation": "Valider playerId (entier positif) et playerDays (entier positif)",
          "database_update": "Ajouter playerId et playerDays dans prisma.user.update data"
        }
      }
    },

    "ÉTAPE 5 - USER SERVICE FRONTEND": {
      "file": "src/features/user/services/user.service.ts",
      "action": "Mettre à jour UpdateProfileRequest interface",
      "changes": {
        "interface_UpdateProfileRequest": {
          "add_properties": [
            "playerId?: number;",
            "playerDays?: number;"
          ]
        },
        "updateProfile_method": "Ajouter playerId et playerDays dans la requête HTTP"
      }
    },

    "ÉTAPE 6 - USER ACCOUNT COMPONENT": {
      "file": "src/features/user/components/user-account/user-account.ts",
      "action": "Ajouter les nouveaux champs au formulaire",
      "changes": {
        "component_properties": [
          "playerId = signal<number | undefined>(undefined);",
          "playerDays = signal<number | undefined>(undefined);"
        ],
        "loadProfile_method": "Initialiser playerId et playerDays depuis user data",
        "updateProfile_method": "Inclure playerId et playerDays dans la mise à jour"
      }
    },

    "ÉTAPE 7 - USER ACCOUNT TEMPLATE": {
      "file": "src/features/user/components/user-account/user-account.html",
      "action": "Ajouter les champs de saisie",
      "changes": {
        "form_fields": [
          "<input type=\"number\" [(ngModel)]=\"playerId\" placeholder=\"Votre ID colon (ex: 141050)\">",
          "<input type=\"number\" [(ngModel)]=\"playerDays\" placeholder=\"Vos jours sur Mars (ex: 4077)\">"
        ]
      }
    }
  },

  "testing_scenarios": [
    {
      "scenario": "Utilisateur connecté avec playerId=141050 et playerDays=4077",
      "expected": "Terminal affiche '141050:~$ NETWORK' et '> SOL 2086 - DAY 4077'"
    },
    {
      "scenario": "Utilisateur connecté sans playerId/playerDays",
      "expected": "Terminal affiche 'inconnu:~$ NETWORK' et '> SOL 2086 - DAY inconnu'"
    },
    {
      "scenario": "Utilisateur non connecté",
      "expected": "Terminal affiche 'inconnu:~$ NETWORK' et '> SOL 2086 - DAY inconnu'"
    },
    {
      "scenario": "Mise à jour des données utilisateur",
      "expected": "Terminal se met à jour automatiquement grâce aux computed signals"
    }
  ],

  "validation_checklist": [
    "Migration Prisma appliquée sans erreur",
    "Interface User mise à jour partout",
    "Terminal utilise computed() pour réactivité",
    "Backend accepte et sauvegarde playerId/playerDays",
    "Formulaire User Account fonctionnel",
    "Fallback 'inconnu' fonctionne correctement",
    "Pas d'erreurs TypeScript",
    "Architecture du projet respectée"
  ],

  "order_of_execution": [
    "1. Migration Prisma (base de données)",
    "2. Interface TypeScript (types)",
    "3. Backend controller (API)",
    "4. User service frontend (communication)",
    "5. Terminal component (logique)",
    "6. User Account component (formulaire)",
    "7. User Account template (UI)",
    "8. Tests complets"
  ]
}