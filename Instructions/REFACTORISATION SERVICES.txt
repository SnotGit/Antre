# üîß REFACTORISATION SERVICES FRONTEND

## üéØ **OBJECTIF**
Architecture 1:1 Backend Controllers ‚Üî Frontend Services  
**DDD coh√©rent** + **Responsabilit√© unique** par service

---

## üìã **PLAN COMPLET - 3 DOMAINES**

### üîê **√âTAPE 1 : AUTH DOMAIN**

#### **SERVICES √Ä CR√âER :**
1. **`loginService.ts`**
   - **Fonctions :** `login(email, password)`
   - **Route Backend :** `POST /api/auth/login`
   - **Migrer depuis :** `authService.login()`

2. **`tokenService.ts`**  
   - **Fonctions :** `validateToken()`, `getTokenInfo()`
   - **Route Backend :** `GET /api/auth/validate`
   - **Migrer depuis :** `authService.validateTokenSilently()`

#### **MODIFICATIONS :**
- **authService.ts** ‚Üí **Garde** : `currentUser`, `isLoggedIn`, `logout`, state management
- **Supprime** : `login()`, `register()`, `validateTokenSilently()`
- **Components** ‚Üí **Importer** : `loginService` + `tokenService`

---

### üë§ **√âTAPE 2 : USER DOMAIN**

#### **SERVICES √Ä CR√âER :**

1. **`registerService.ts`**
   - **Fonctions :** `register(userData)`
   - **Route Backend :** `POST /api/user/register`
   - **Migrer depuis :** `authService.register()`

2. **`profileService.ts`** ‚úÖ **EXISTE D√âJ√Ä**
   - **V√©rifier routes :** `GET /api/user/profile`, `PUT /api/user/profile`
   - **Possibles ajouts :** `updateAvatar()` si s√©par√©

3. **`statsService.ts`** ‚úÖ **EXISTE D√âJ√Ä**
   - **V√©rifier route :** `GET /api/user/stats`  
   - **V√©rifier format response :** `{ stats: { drafts, published, totalStories, totalLikes } }`

4. **`credentialsService.ts`**
   - **Fonctions :** `updateEmail(newEmail)`, `changePassword(current, new)`
   - **Routes Backend :** `PUT /api/user/credentials/email`, `PUT /api/user/credentials/password`
   - **Nouveau service** (actuellement dans profileService ?)

5. **`likeService.ts`** üö® **√Ä REFACTORISER**
   - **Fonctions :**
     ```typescript
     getCount(storyId)        // GET /api/user/likes/story/:id/count
     getStatus(storyId)       // GET /api/user/likes/story/:id/status  
     toggleLike(storyId)      // POST /api/user/likes/story/:id/toggle
     getPostedLikes()         // GET /api/user/likes/my-stories
     ```
   - **PROBL√àME ACTUEL :** Routes incorrectes dans service existant

#### **MODIFICATIONS :**
- **authService.ts** ‚Üí **Supprime** `register()`
- **Components auth** ‚Üí **Importer** `registerService`
- **Components user** ‚Üí **Importer** services sp√©cialis√©s

---

### üìö **√âTAPE 3 : CHRONIQUES DOMAIN**

#### **SERVICES ACTUELS √Ä REFACTORISER :**

1. **`loadService.ts`** ‚Üí **S√âPARER EN 3 :**
   
   **A) `publicStoriesService.ts`**
   - **Fonctions :** `getLatestStories()`, `getStory(id)`, `getStories(userId)`
   - **Routes :** `GET /chroniques/stories/latest`, `GET /chroniques/stories/:id`, `GET /user/:userId/stories`
   
   **B) `draftsStoriesService.ts`**  
   - **Fonctions :** `getDraftStories()`, `getDraftStory(id)`
   - **Routes :** `GET /chroniques/stories/drafts`, `GET /chroniques/stories/drafts/:id`
   
   **C) `publishedStoriesService.ts`**
   - **Fonctions :** `getPublishedStories()`, `getPublishedStory(id)`  
   - **Routes :** `GET /chroniques/stories/published`, `GET /chroniques/stories/published/:id`

2. **`saveService.ts`** ‚Üí **`saveStoriesService.ts`**
   - **Fonctions :** `createDraft()`, `saveDraft(id)`, `publishStory(id)`, `updateStory(id)`
   - **Routes :** `POST /chroniques/stories/drafts`, `PUT /chroniques/stories/drafts/:id`, etc.
   - **Renommer** seulement pour coh√©rence

3. **`deleteService.ts`** ‚Üí **`deleteStoriesService.ts`**
   - **Fonctions :** `deleteStory(id)`, `deleteStories(ids[])`
   - **Routes :** `DELETE /chroniques/stories/:id`, `POST /chroniques/stories/delete`
   - **Renommer** seulement pour coh√©rence

#### **MODIFICATIONS :**
- **Components** ‚Üí **Importer** services sp√©cialis√©s au lieu de `loadService`
- **Supprimer** `loadService.ts` apr√®s migration

---

## üìä **BILAN TRAVAIL**

### **üÜï SERVICES √Ä CR√âER :** (7)
1. `loginService.ts`
2. `tokenService.ts` 
3. `registerService.ts`
4. `credentialsService.ts`
5. `publicStoriesService.ts`
6. `draftsStoriesService.ts` 
7. `publishedStoriesService.ts`

### **üîß SERVICES √Ä MODIFIER :** (5)
1. `authService.ts` ‚Üí State management pur
2. `likeService.ts` ‚Üí Nouvelles routes
3. `statsService.ts` ‚Üí V√©rifier format response
4. `saveService.ts` ‚Üí Renommer `saveStoriesService.ts`
5. `deleteService.ts` ‚Üí Renommer `deleteStoriesService.ts`

### **üóëÔ∏è SERVICES √Ä SUPPRIMER :** (1)
1. `loadService.ts` ‚Üí √âclat√© en 3 services

### **üìù COMPOSANTS √Ä MODIFIER :** (~15-20)
- Tous les composants auth (imports services)
- Tous les composants user (imports services)  
- Tous les composants chroniques (imports services)

---

## üöÄ **ORDRE D'EX√âCUTION**

### **PHASE 1 : AUTH** (2 services)
- loginService.ts
- tokenService.ts
- Modifier authService.ts

### **PHASE 2 : USER** (2 services + 1 fix)
- registerService.ts  
- credentialsService.ts
- Fix likeService.ts

### **PHASE 3 : CHRONIQUES** (3 services + 2 renames)
- publicStoriesService.ts
- draftsStoriesService.ts
- publishedStoriesService.ts
- Renommer save/delete services

### **PHASE 4 : NETTOYAGE**
- Supprimer loadService.ts
- Modifier tous les composants
- Tests fonctionnels

---

**üéØ R√âSULTAT FINAL :**
**12 services sp√©cialis√©s** correspondant exactement aux **12 controllers backend**  
**Architecture DDD parfaite** Frontend ‚Üî Backend