//======= GENERATOR & DATASOURCE =======

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//======= USER MODEL =======

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  description  String?
  avatar       String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  role         UserRole @default(user)
  playerDays   Int?     @map("player_days")
  playerId     String?  @map("player_id") @db.VarChar(100)
  
  likes        Like[]
  stories      Story[]

  @@map("users")
}

//======= STORY MODEL =======

model Story {
  id              Int         @id @default(autoincrement())
  title           String      @db.VarChar(200)
  content         String
  status          StoryStatus @default(DRAFT)
  userId          Int         @map("user_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  publishedAt     DateTime?   @map("published_at")
  originalStoryId Int?        @map("original_story_id")
  
  likes           Like[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status, publishedAt])
  @@index([originalStoryId])
  @@map("stories")
}

//======= LIKE MODEL =======

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  storyId   Int      @map("story_id")
  createdAt DateTime @default(now()) @map("liked_at")
  
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@map("likes")
}

//======= MARSBALL MODELS =======

model MarsballCategory {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(200)
  parentId  Int?     @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  parent   MarsballCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children MarsballCategory[] @relation("CategoryHierarchy")
  items    MarsballItem[]

  @@index([parentId], map: "idx_marsball_categories_parent")
  @@map("marsball_categories")
}

model MarsballItem {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(200)
  imageUrl   String   @map("image_url") @db.VarChar(500)
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  category MarsballCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([categoryId], map: "idx_marsball_items_category")
  @@map("marsball_items")
}

//======= ENUMS =======

enum UserRole {
  admin
  user
}

enum StoryStatus {
  DRAFT
  PUBLISHED
}